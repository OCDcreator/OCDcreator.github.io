<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/11/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2024/11/10/test/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<span id="more"></span>
<p>图片</p>
<p>正文</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//tools.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tools.h&gt;</span></span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">FileToMem</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> szFilePath<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nFileSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 打开文件</span>
    FILE<span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>szFilePath<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFile<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileToMem fopen fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取文件长度</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nSize <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 回到文件的开始位置</span>

    <span class="token comment">// 申请内存   存储文件二进制数据</span>
    <span class="token keyword">char</span><span class="token operator">*</span> pFileBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFileBuffer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token function">memset</span><span class="token punctuation">(</span>pFileBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 读取数据</span>
    <span class="token function">fread</span><span class="token punctuation">(</span>pFileBuffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nSize<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//判断MZ标记</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span>pFileBuffer <span class="token operator">!=</span> IMAGE_DOS_SIGNATURE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MZ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>pFileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pFileBuffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//判断PE标记    DWORD   PDWORD 相当于DWORD* 是一个指针类型</span>
    DWORD dwOffest <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span>pFileBuffer <span class="token operator">+</span> <span class="token number">0x3c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PDWORD PeSignature <span class="token operator">=</span> <span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span>pFileBuffer <span class="token operator">+</span> dwOffest<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>PeSignature <span class="token operator">!=</span> IMAGE_NT_SIGNATURE<span class="token punctuation">)</span>  <span class="token comment">//if(*(PDWORD)(pFileBuffer + *(PDWORD)(pFileBuffer + 0x3c)) != IMAGE_NT_SIGNATURE)这样写省去上面两步</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>pFileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pFileBuffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 这里可以对 pFileBuffer 进行其他操作，例如处理文件数据等</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>nFileSize <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>nFileSize <span class="token operator">=</span> nSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">return</span> pFileBuffer<span class="token punctuation">;</span> <span class="token comment">//</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">MemToFile</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> szFilePath<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> Buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> FileSize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE<span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>szFilePath<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFile<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fopen fail \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> FileSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printfileheader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//输出标准PE头数据</span>
<span class="token punctuation">{</span>
    DWORD dwFileSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    PCHAR pFileBuffer <span class="token operator">=</span> <span class="token function">FileToMem</span><span class="token punctuation">(</span>FILE_PATH_IN<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char == CHAR    PCHAR == char*</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFileBuffer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>pFileBuffer<span class="token punctuation">;</span>
    PIMAGE_NT_HEADERS pNts <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pFileBuffer <span class="token operator">+</span> pDos<span class="token operator">-&gt;</span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PIMAGE_FILE_HEADER pFil <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pNts <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> pFil<span class="token operator">-&gt;</span>Machine<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">printfsectionheader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    DWORD dwFileSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    PCHAR pFileBuffer <span class="token operator">=</span> <span class="token function">FileToMem</span><span class="token punctuation">(</span>FILE_PATH_IN<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char == CHAR    PCHAR == char*</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFileBuffer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>pFileBuffer<span class="token punctuation">;</span>
    PIMAGE_NT_HEADERS pNts <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pFileBuffer <span class="token operator">+</span> pDos<span class="token operator">-&gt;</span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PIMAGE_FILE_HEADER pFil <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pNts <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PIMAGE_OPTIONAL_HEADER pOpo <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_OPTIONAL_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span><span class="token operator">+</span>IMAGE_SIZEOF_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PIMAGE_SECTION_HEADER psec <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_SECTION_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pOpo <span class="token operator">+</span> pFil<span class="token operator">-&gt;</span>SizeOfOptionalHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>

    CHAR szName<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pFil<span class="token operator">-&gt;</span>NumberOfSections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>szName<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> IMAGE_SIZEOF_SHORT_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %s \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> szName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %x \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Misc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %x \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %x \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %x \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Characteristics<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

PCHAR <span class="token function">FileBufferToImageBuffer</span><span class="token punctuation">(</span>PCHAR pFileBuffer<span class="token punctuation">)</span>  <span class="token comment">//文件缓存转换成内存缓存，内存缓存转换为文件缓存，保存文件。</span>
<span class="token punctuation">{</span>
    <span class="token comment">//定位pe结构</span>
    PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>pFileBuffer<span class="token punctuation">;</span>
    PIMAGE_NT_HEADERS pNts <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-&gt;</span>e_lfanew <span class="token operator">+</span> pFileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PIMAGE_FILE_HEADER pFil <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pNts <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    PIMAGE_OPTIONAL_HEADER pOpo <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_OPTIONAL_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pFil <span class="token operator">+</span> IMAGE_SIZEOF_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PIMAGE_SECTION_HEADER psec <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_SECTION_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pOpo <span class="token operator">+</span> pFil<span class="token operator">-&gt;</span>SizeOfOptionalHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//分配ImageBuffer对应的内存空间</span>
    DWORD dwImageSize <span class="token operator">=</span> pOpo<span class="token operator">-&gt;</span>SizeOfImage<span class="token punctuation">;</span>
    PCHAR pImageBuffer <span class="token operator">=</span> <span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>dwImageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pImageBuffer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>pImageBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dwImageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//拷贝pe头</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>pImageBuffer<span class="token punctuation">,</span> pFileBuffer<span class="token punctuation">,</span> pOpo<span class="token operator">-&gt;</span>SizeOfHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//拷贝节区数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pFil<span class="token operator">-&gt;</span>NumberOfSections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>pImageBuffer <span class="token operator">+</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">,</span>
               pFileBuffer <span class="token operator">+</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">,</span>
               psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> pImageBuffer<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考</p>
]]></content>
      <categories>
        <category>阅读感言</category>
      </categories>
      <tags>
        <tag>人文历史</tag>
        <tag>美国</tag>
      </tags>
  </entry>
</search>
