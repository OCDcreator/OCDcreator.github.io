<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黎明之曙</title>
  
  
  <link href="http://ocdcreator.github.io/atom.xml" rel="self"/>
  
  <link href="http://ocdcreator.github.io/"/>
  <updated>2024-11-11T07:07:55.167Z</updated>
  <id>http://ocdcreator.github.io/</id>
  
  <author>
    <name>曙光</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://ocdcreator.github.io/2024/11/10/test/"/>
    <id>http://ocdcreator.github.io/2024/11/10/test/</id>
    <published>2024-11-10T06:54:28.000Z</published>
    <updated>2024-11-11T07:07:55.167Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介</p></blockquote><span id="more"></span><p>图片</p><p>正文</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//tools.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tools.h&gt;</span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">FileToMem</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> szFilePath<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nFileSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 打开文件</span>    FILE<span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>szFilePath<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFile<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileToMem fopen fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取文件长度</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nSize <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 回到文件的开始位置</span>    <span class="token comment">// 申请内存   存储文件二进制数据</span>    <span class="token keyword">char</span><span class="token operator">*</span> pFileBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFileBuffer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token function">memset</span><span class="token punctuation">(</span>pFileBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取数据</span>    <span class="token function">fread</span><span class="token punctuation">(</span>pFileBuffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nSize<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断MZ标记</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span>pFileBuffer <span class="token operator">!=</span> IMAGE_DOS_SIGNATURE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MZ \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pFileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        pFileBuffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断PE标记    DWORD   PDWORD 相当于DWORD* 是一个指针类型</span>    DWORD dwOffest <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span>pFileBuffer <span class="token operator">+</span> <span class="token number">0x3c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PDWORD PeSignature <span class="token operator">=</span> <span class="token punctuation">(</span>PDWORD<span class="token punctuation">)</span><span class="token punctuation">(</span>pFileBuffer <span class="token operator">+</span> dwOffest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>PeSignature <span class="token operator">!=</span> IMAGE_NT_SIGNATURE<span class="token punctuation">)</span>  <span class="token comment">//if(*(PDWORD)(pFileBuffer + *(PDWORD)(pFileBuffer + 0x3c)) != IMAGE_NT_SIGNATURE)这样写省去上面两步</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"PE \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pFileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        pFileBuffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 这里可以对 pFileBuffer 进行其他操作，例如处理文件数据等</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nFileSize <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>nFileSize <span class="token operator">=</span> nSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pFileBuffer<span class="token punctuation">;</span> <span class="token comment">//</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">MemToFile</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> szFilePath<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> Buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> FileSize<span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE<span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>szFilePath<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFile<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fopen fail \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> FileSize<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printfileheader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//输出标准PE头数据</span><span class="token punctuation">{</span>    DWORD dwFileSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    PCHAR pFileBuffer <span class="token operator">=</span> <span class="token function">FileToMem</span><span class="token punctuation">(</span>FILE_PATH_IN<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char == CHAR    PCHAR == char*</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFileBuffer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>pFileBuffer<span class="token punctuation">;</span>    PIMAGE_NT_HEADERS pNts <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pFileBuffer <span class="token operator">+</span> pDos<span class="token operator">-&gt;</span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_FILE_HEADER pFil <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pNts <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span> pFil<span class="token operator">-&gt;</span>Machine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printfsectionheader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    DWORD dwFileSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    PCHAR pFileBuffer <span class="token operator">=</span> <span class="token function">FileToMem</span><span class="token punctuation">(</span>FILE_PATH_IN<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dwFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char == CHAR    PCHAR == char*</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pFileBuffer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>pFileBuffer<span class="token punctuation">;</span>    PIMAGE_NT_HEADERS pNts <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pFileBuffer <span class="token operator">+</span> pDos<span class="token operator">-&gt;</span>e_lfanew<span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_FILE_HEADER pFil <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pNts <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_OPTIONAL_HEADER pOpo <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_OPTIONAL_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span><span class="token operator">+</span>IMAGE_SIZEOF_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_SECTION_HEADER psec <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_SECTION_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pOpo <span class="token operator">+</span> pFil<span class="token operator">-&gt;</span>SizeOfOptionalHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>    CHAR szName<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pFil<span class="token operator">-&gt;</span>NumberOfSections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>szName<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> IMAGE_SIZEOF_SHORT_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %s \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> szName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %x \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Misc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %x \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %x \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] -&gt; %x \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Characteristics<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>PCHAR <span class="token function">FileBufferToImageBuffer</span><span class="token punctuation">(</span>PCHAR pFileBuffer<span class="token punctuation">)</span>  <span class="token comment">//文件缓存转换成内存缓存，内存缓存转换为文件缓存，保存文件。</span><span class="token punctuation">{</span>    <span class="token comment">//定位pe结构</span>    PIMAGE_DOS_HEADER pDos <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_DOS_HEADER<span class="token punctuation">)</span>pFileBuffer<span class="token punctuation">;</span>    PIMAGE_NT_HEADERS pNts <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_NT_HEADERS<span class="token punctuation">)</span><span class="token punctuation">(</span>pDos<span class="token operator">-&gt;</span>e_lfanew <span class="token operator">+</span> pFileBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_FILE_HEADER pFil <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pNts <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_OPTIONAL_HEADER pOpo <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_OPTIONAL_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pFil <span class="token operator">+</span> IMAGE_SIZEOF_FILE_HEADER<span class="token punctuation">)</span><span class="token punctuation">;</span>    PIMAGE_SECTION_HEADER psec <span class="token operator">=</span> <span class="token punctuation">(</span>PIMAGE_SECTION_HEADER<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span>pOpo <span class="token operator">+</span> pFil<span class="token operator">-&gt;</span>SizeOfOptionalHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//分配ImageBuffer对应的内存空间</span>    DWORD dwImageSize <span class="token operator">=</span> pOpo<span class="token operator">-&gt;</span>SizeOfImage<span class="token punctuation">;</span>    PCHAR pImageBuffer <span class="token operator">=</span> <span class="token punctuation">(</span>PCHAR<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>dwImageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pImageBuffer<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pImageBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dwImageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拷贝pe头</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>pImageBuffer<span class="token punctuation">,</span> pFileBuffer<span class="token punctuation">,</span> pOpo<span class="token operator">-&gt;</span>SizeOfHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拷贝节区数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pFil<span class="token operator">-&gt;</span>NumberOfSections<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>pImageBuffer <span class="token operator">+</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>VirtualAddress<span class="token punctuation">,</span>               pFileBuffer <span class="token operator">+</span> psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>PointerToRawData<span class="token punctuation">,</span>               psec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>SizeOfRawData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pImageBuffer<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="阅读感言" scheme="http://ocdcreator.github.io/categories/%E9%98%85%E8%AF%BB%E6%84%9F%E8%A8%80/"/>
    
    
    <category term="人文历史" scheme="http://ocdcreator.github.io/tags/%E4%BA%BA%E6%96%87%E5%8E%86%E5%8F%B2/"/>
    
    <category term="美国" scheme="http://ocdcreator.github.io/tags/%E7%BE%8E%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>PE文件解析</title>
    <link href="http://ocdcreator.github.io/2024/11/10/PE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://ocdcreator.github.io/2024/11/10/PE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</id>
    <published>2024-11-10T05:47:18.000Z</published>
    <updated>2024-11-11T08:33:53.687Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简介<br>PE文件结构分析，包含Image_Dos_Header,Image_NT_Header(Signature,FileHeader,OptionalHeader),Image_Section_Header。其中着重描述导出表、导入表、重定位表。</p></blockquote><span id="more"></span><h2 id="头部详解"><a href="#头部详解" class="headerlink" title="头部详解"></a>头部详解</h2><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.32hzdyynp6.webp"><p>在<code>image_optional_header</code>结构中，<code>sizeofimage</code>通常指的是某个特定字段的大小。在Windows Portable Executable (PE)文件格式中，<code>SizeOfImage</code>是<strong>整个映像文件（image file）的内存映像的大小</strong>，它包括了加载时所有的部分（如代码段、数据段、导入表等）的大小。这是整个PE文件在内存中占用的大小，通常在PE文件被加载到内存后，操作系统根据此值来分配足够的空间。</p><p>在<code>image_optional_header</code>结构中，<code>SizeOfHeaders</code>字段表示<strong>PE文件所有头部信息的总大小</strong>，这包括了：</p><ol><li><strong>DOS头</strong>（DOS Header），即 <code>IMAGE_DOS_HEADER</code>。</li><li><strong>PE签名</strong>（PE Signature），通常是4字节的 “PE\0\0”。</li><li><strong>文件头</strong>（File Header），即 <code>IMAGE_FILE_HEADER</code>。</li><li><strong>可选头</strong>（Optional Header），即 <code>IMAGE_OPTIONAL_HEADER</code>，包含更多详细的加载信息。</li><li><strong>节表</strong>（Section Headers），即 <code>IMAGE_SECTION_HEADER</code>，描述了PE文件中的各个节（段）的起始位置、大小等。</li></ol><p><code>SizeOfHeaders</code>反映的是这些头部信息在PE文件中的总大小，并且通常是按文件对齐值（<code>FileAlignment</code>）对齐的。</p><h2 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h2><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.83a25j6jnv.webp" width="500"><p>TestDll的文件拖入winhex</p><p>此时导出表的RVA是018FA0，大小是181</p><p>内存对齐1000，文件对齐大小200</p><p>此时RVA ≠ FOA，需要进行转换</p><p>将TestDll拖入PETools，工具栏点击S出现区段表</p><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.6m3x3s3ctq.webp" width="500"><p>很明显在 .rdata段，计算文件中的偏移：</p><p>18FA0-17000=1FA0，1FA0+5A00=79A0</p><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.9kg77abuwt.webp"><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>将petools拖入winhex中查看：</p><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.7egslikgqc.webp"><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.64dvf72lqf.webp"><p>也就是说，DataDireactory的第二个元素是导入表的rva和大小，这个rva指向文件偏移0x22A10处，大小为0x78个字节，20个字节是一个导入表的结构，所以一共有5个导入表结构，因为最后一个是20个全0字节代表导入表结束。</p><p>下面主要研究导入表中的第一个元素，<strong>OriginalFirstThunk</strong>，</p><p>OriginalFirstThunk指向的是一个由IMAGE_THUNK_DATA结构体组成的数组，每个结构体的最高有效位为1，则低31位为函数导出序号；否则每个结构体指向一个由2字节Hint以及以00结尾的一个字符串组成的结构体IMAGE_IMPORT_BY_NAME。</p><p>第四个元素，<strong>Name</strong>，每个导入表的name元素是一个rva指向导入的dll字符串名称，在2进制中会以00结尾。</p><p>第五个元素，<strong>FirstThunk</strong>，FirstThunk指向的是一个由IMAGE_THUNK_DATA结构体组成的数组，在未执行前，也就是文件中时和OriginalFirstThunk指向的结构体完全一致。</p><h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.83a25j6jnv.webp" width="500px"><p>将TestDll拖入PETools，工具栏点击S出现区段表</p><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.6m3x3s3ctq.webp" width="500px"><p>在内存中的rva是0x01F000，很明显是 .reloc段，在文件中是0x9200</p><img src="https://OCDcreator.github.io/picx-images-hosting/SGblog/image.86to391p18.webp">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简介&lt;br&gt;PE文件结构分析，包含Image_Dos_Header,Image_NT_Header(Signature,FileHeader,OptionalHeader),Image_Section_Header。其中着重描述导出表、导入表、重定位表。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="逆向工程" scheme="http://ocdcreator.github.io/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="Windows逆向工程" scheme="http://ocdcreator.github.io/tags/Windows%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="可执行文件" scheme="http://ocdcreator.github.io/tags/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ocdcreator.github.io/2024/11/09/hello-world/"/>
    <id>http://ocdcreator.github.io/2024/11/09/hello-world/</id>
    <published>2024-11-09T14:11:14.376Z</published>
    <updated>2024-11-09T14:11:14.376Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
